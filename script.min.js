const SUITS=['♥','♦','♠','♣'];const VALUES=['A','2','3','4','5','6','7','8','9','10','J','Q','K'];let gameState={deck:[],stock:[],waste:[],foundation:[[],[],[],[]],tableau:[[],[],[],[],[],[],[]],selectedCard:null,selectedSource:null,selectedIndex:null,moves:0,startTime:null,timer:null,gameOver:false,totalFoundationCards:0};function initGame(){resetGameState();createDeck();shuffleDeck();dealCards();updateUI();document.getElementById('timer').textContent='00:00';document.getElementById('moves').textContent='0';showMessage('Игра началась! Удачи!','success');}function resetGameState(){gameState={deck:[],stock:[],waste:[],foundation:[[],[],[],[]],tableau:[[],[],[],[],[],[],[]],selectedCard:null,selectedSource:null,selectedIndex:null,moves:0,startTime:null,timer:null,gameOver:false,totalFoundationCards:0};clearInterval(gameState.timer);const allCards=document.querySelectorAll('.card');allCards.forEach(card=>card.remove());}function createDeck(){gameState.deck=[];for(const suit of SUITS){for(const value of VALUES){gameState.deck.push({suit,value,faceUp:false,color:suit==='♥'||suit==='♦'?'red':'black'});}}}function shuffleDeck(){for(let i=gameState.deck.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[gameState.deck[i],gameState.deck[j]]=[gameState.deck[j],gameState.deck[i]];}}function dealCards(){for(let i=0;i<7;i++){for(let j=i;j<7;j++){const card=gameState.deck.pop();card.faceUp=i===j;gameState.tableau[j].push(card);}}gameState.stock=gameState.deck.slice();gameState.deck=[];}function updateUI(){updateTableau();updateStock();updateWaste();updateFoundation();}function updateTableau(){const tableauColumns=document.querySelectorAll('.tableau-column');tableauColumns.forEach((column,columnIndex)=>{column.innerHTML='';const cards=gameState.tableau[columnIndex];let offsetTop=10;cards.forEach((card,cardIndex)=>{const cardElement=createCardElement(card);cardElement.style.top=`${offsetTop}px`;column.appendChild(cardElement);if(card.faceUp){cardElement.addEventListener('click',()=>handleCardClick('tableau',columnIndex,cardIndex));}offsetTop+=card.faceUp?30:15;});});}function updateStock(){const stockPile=document.querySelector('.stock-pile');stockPile.innerHTML='';stockPile.classList.toggle('empty',gameState.stock.length===0);if(gameState.stock.length>0){const cardBack=document.createElement('div');cardBack.className='card face-down';stockPile.appendChild(cardBack);cardBack.addEventListener('click',drawCard);}}function updateWaste(){const wastePile=document.querySelector('.waste-pile');wastePile.innerHTML='';wastePile.classList.toggle('empty',gameState.waste.length===0);gameState.waste.slice(-3).forEach((card,index)=>{const cardElement=createCardElement(card);cardElement.style.zIndex=index;wastePile.appendChild(cardElement);if(index===gameState.waste.slice(-3).length-1){cardElement.addEventListener('click',()=>handleCardClick('waste',0,gameState.waste.length-1));}});}function updateFoundation(){const foundationSlots=document.querySelectorAll('.foundation-slot');foundationSlots.forEach((slot,slotIndex)=>{slot.innerHTML='';slot.classList.toggle('empty',gameState.foundation[slotIndex].length===0);if(gameState.foundation[slotIndex].length>0){const topCard=gameState.foundation[slotIndex][gameState.foundation[slotIndex].length-1];const cardElement=createCardElement(topCard);slot.appendChild(cardElement);cardElement.addEventListener('click',()=>handleCardClick('foundation',slotIndex,gameState.foundation[slotIndex].length-1));if(gameState.foundation[slotIndex].length>1){const counter=document.createElement('div');counter.className='card-counter';counter.textContent=gameState.foundation[slotIndex].length;cardElement.appendChild(counter);}}slot.addEventListener('click',()=>handleEmptyFoundationClick(slotIndex));});}function createCardElement(card){const cardElement=document.createElement('div');cardElement.className=`card ${card.faceUp?'':'face-down'} ${card.faceUp?card.color:''}`;if(card.faceUp){const cardContent=document.createElement('div');cardContent.className='card-content';const cardTop=document.createElement('div');cardTop.className='card-top';const topValue=document.createElement('span');topValue.className='card-value';topValue.textContent=card.value;const topSuit=document.createElement('span');topSuit.className='card-suit';topSuit.textContent=card.suit;cardTop.appendChild(topValue);cardTop.appendChild(topSuit);const cardCenter=document.createElement('div');cardCenter.className='card-center';cardCenter.textContent=card.suit;const cardBottom=document.createElement('div');cardBottom.className='card-bottom';const bottomValue=document.createElement('span');bottomValue.className='card-value';bottomValue.textContent=card.value;const bottomSuit=document.createElement('span');bottomSuit.className='card-suit';bottomSuit.textContent=card.suit;cardBottom.appendChild(bottomValue);cardBottom.appendChild(bottomSuit);cardContent.appendChild(cardTop);cardContent.appendChild(cardCenter);cardContent.appendChild(cardBottom);cardElement.appendChild(cardContent);}return cardElement;}function handleCardClick(source,pileIndex,cardIndex){if(gameState.gameOver)return;if(!gameState.startTime){startTimer();}if(gameState.selectedCard){if(source===gameState.selectedSource&&pileIndex===gameState.selectedIndex&&cardIndex===getTopCardIndex(source,pileIndex)){unselectCard();return;}if(canMoveCards(gameState.selectedSource,gameState.selectedIndex,gameState.selectedCardIndex,source,pileIndex)){moveCards(gameState.selectedSource,gameState.selectedIndex,gameState.selectedCardIndex,source,pileIndex);unselectCard();incrementMoves();checkWinCondition();return;}unselectCard();}const cards=getCardsFromSource(source,pileIndex);if(cardIndex<cards.length-1&&source==='tableau'){selectCard(source,pileIndex,cardIndex);}}function handleEmptyFoundationClick(foundationIndex){if(gameState.selectedCard){if(canMoveCards(gameState.selectedSource,gameState.selectedIndex,gameState.selectedCardIndex,'foundation',foundationIndex)){moveCards(gameState.selectedSource,gameState.selectedIndex,gameState.selectedCardIndex,'foundation',foundationIndex);unselectCard();incrementMoves();checkWinCondition();}}}function selectCard(source,pileIndex,cardIndex){unselectCard();gameState.selectedCard=true;gameState.selectedSource=source;gameState.selectedIndex=pileIndex;gameState.selectedCardIndex=cardIndex;highlightSelectedCard(source,pileIndex,cardIndex);}function unselectCard(){gameState.selectedCard=null;gameState.selectedSource=null;gameState.selectedIndex=null;gameState.selectedCardIndex=null;clearHighlights();}function highlightSelectedCard(source,pileIndex,cardIndex){clearHighlights();const cards=getCardsFromSource(source,pileIndex);for(let i=cardIndex;i<cards.length;i++){const card=getCardElement(source,pileIndex,i);if(card)card.classList.add('selected');}}function clearHighlights(){const highlightedCards=document.querySelectorAll('.card.selected, .card.highlight-foundation, .card.highlight-tableau, .card.highlight-move');highlightedCards.forEach(card=>card.classList.remove('selected','highlight-foundation','highlight-tableau','highlight-move'));const highlightedSlots=document.querySelectorAll('.tableau-column.highlight, .foundation-slot.highlight');highlightedSlots.forEach(slot=>slot.classList.remove('highlight'));}function getCardElement(source,pileIndex,cardIndex){if(source==='tableau'){const column=document.querySelectorAll('.tableau-column')[pileIndex];const cards=column.querySelectorAll('.card');return cards[cardIndex];}else if(source==='waste'&&cardIndex===gameState.waste.length-1){const wastePile=document.querySelector('.waste-pile');return wastePile.querySelector('.card:last-child');}else if(source==='foundation'){const foundationSlot=document.querySelectorAll('.foundation-slot')[pileIndex];return foundationSlot.querySelector('.card');}}function getCardsFromSource(source,pileIndex){if(source==='tableau')return gameState.tableau[pileIndex];else if(source==='waste')return gameState.waste;else if(source==='foundation')return gameState.foundation[pileIndex];return[];}function getTopCardIndex(source,pileIndex){const cards=getCardsFromSource(source,pileIndex);return cards.length-1;}function canMoveCards(fromSource,fromPile,fromCardIndex,toSource,toPile){const fromCards=getCardsFromSource(fromSource,fromPile);const toCards=getCardsFromSource(toSource,toPile);if(fromCardIndex>=fromCards.length)return false;if(!fromCards[fromCardIndex].faceUp)return false;if(fromSource===toSource&&fromPile===toPile)return false;if(toSource==='tableau'){if(toCards.length===0){return fromCards[fromCardIndex].value==='K';}const toTopCard=toCards[toCards.length-1];if(!toTopCard.faceUp)return false;if(toTopCard.color===fromCards[fromCardIndex].color)return false;const toValueIndex=VALUES.indexOf(toTopCard.value);const fromValueIndex=VALUES.indexOf(fromCards[fromCardIndex].value);return toValueIndex-fromValueIndex===1;}else if(toSource==='foundation'){return canMoveToFoundation(fromSource,fromPile,fromCardIndex,toPile);}return false;}function canMoveToFoundation(fromSource,fromPile,fromCardIndex,foundationPile){const fromCards=getCardsFromSource(fromSource,fromPile);const foundationCards=gameState.foundation[foundationPile];if(fromCardIndex<fromCards.length-1)return false;const card=fromCards[fromCardIndex];if(foundationCards.length===0){return card.value==='A';}const topFoundationCard=foundationCards[foundationCards.length-1];return card.suit===topFoundationCard.suit&&VALUES.indexOf(card.value)-VALUES.indexOf(topFoundationCard.value)===1;}function moveCards(fromSource,fromPile,fromCardIndex,toSource,toPile){const fromCards=getCardsFromSource(fromSource,fromPile);const toCards=getCardsFromSource(toSource,toPile);const cardsToMove=fromCards.splice(fromCardIndex);if(fromSource==='tableau'&&fromCards.length>0&&!fromCards[fromCards.length-1].faceUp){fromCards[fromCards.length-1].faceUp=true;}toCards.push(...cardsToMove);if(toSource==='foundation'){gameState.totalFoundationCards+=cardsToMove.length;updateProgressBar();}updateUI();}function drawCard(){if(gameState.gameOver)return;if(!gameState.startTime){startTimer();}if(gameState.stock.length>0){const card=gameState.stock.pop();card.faceUp=true;gameState.waste.push(card);incrementMoves();}else if(gameState.waste.length>0){while(gameState.waste.length>0){const card=gameState.waste.pop();card.faceUp=false;gameState.stock.push(card);}incrementMoves();}updateStock();updateWaste();}function incrementMoves(){gameState.moves++;document.getElementById('moves').textContent=gameState.moves;}function startTimer(){gameState.startTime=Date.now();gameState.timer=setInterval(updateTimer,1000);document.querySelector('.timer-hint').style.display='none';}function updateTimer(){if(!gameState.startTime)return;const currentTime=Date.now();const elapsedSeconds=Math.floor((currentTime-gameState.startTime)/1000);const minutes=Math.floor(elapsedSeconds/60);const seconds=elapsedSeconds%60;document.getElementById('timer').textContent=`${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`;}function checkWinCondition(){if(gameState.totalFoundationCards===52){gameState.gameOver=true;clearInterval(gameState.timer);showWinModal();}}function showWinModal(){const modal=document.getElementById('win-modal');const timeSpent=document.getElementById('timer').textContent;const movesUsed=gameState.moves;document.getElementById('win-time').textContent=timeSpent;document.getElementById('win-moves').textContent=movesUsed;modal.classList.add('active');createConfetti(100);}function createConfetti(count){for(let i=0;i<count;i++){setTimeout(()=>{const confetti=document.createElement('div');confetti.className='confetti';confetti.style.left=`${Math.random()*100}%`;confetti.style.backgroundColor=`hsl(${Math.random()*360}, 100%, 50%)`;confetti.style.animationDuration=`${3+Math.random()*2}s`;document.body.appendChild(confetti);setTimeout(()=>confetti.remove(),5000);},i*50);}}function closeModal(modalId){const modal=document.getElementById(modalId);modal.classList.remove('active');}function newGame(){closeModal('win-modal');initGame();}function showMessage(text,type='info'){const message=document.createElement('div');message.className=`message ${type}`;message.textContent=text;document.body.appendChild(message);setTimeout(()=>{message.classList.add('show');},10);setTimeout(()=>{message.classList.remove('show');setTimeout(()=>{message.remove();},300);},3000);}function showHint(){if(gameState.gameOver)return;const bestMove=findBestMove();if(bestMove){clearHighlights();if(bestMove.type==='draw'){const stockPile=document.querySelector('.stock-pile');stockPile.classList.add('hint-highlight');showHintMessage('Возьмите карту из колоды');}else if(bestMove.type==='move'){const fromCard=getCardElement(bestMove.fromSource,bestMove.fromPile,bestMove.fromCardIndex);if(fromCard){fromCard.classList.add('highlight-move');let targetElement;if(bestMove.toSource==='tableau'){targetElement=document.querySelectorAll('.tableau-column')[bestMove.toPile];}else if(bestMove.toSource==='foundation'){targetElement=document.querySelectorAll('.foundation-slot')[bestMove.toPile];}if(targetElement){targetElement.classList.add('highlight');showHintMessage(`Переместите ${getCardName(bestMove.card)} в ${bestMove.toSource==='tableau'?'колонку':'базу'}`);}}}}else{if(gameState.stock.length>0){const stockPile=document.querySelector('.stock-pile');stockPile.classList.add('hint-highlight');showHintMessage('Возьмите карту из колоды');}else{showHintMessage('Нет доступных ходов. Начните новую игру.');}}}function showHintMessage(text){const hintMessage=document.querySelector('.hint-message')||document.createElement('div');hintMessage.className='hint-message';hintMessage.textContent=text;if(!document.body.contains(hintMessage)){document.body.appendChild(hintMessage);}setTimeout(()=>{hintMessage.classList.add('show');},10);setTimeout(()=>{hintMessage.classList.remove('show');setTimeout(()=>{hintMessage.remove();},300);},3000);}function getCardName(card){return`${card.value}${card.suit}`;}function findBestMove(){const possibleMoves=[];for(let i=0;i<7;i++){const tableauColumn=gameState.tableau[i];if(tableauColumn.length===0)continue;let firstFaceUpIndex=tableauColumn.findIndex(card=>card.faceUp);if(firstFaceUpIndex===-1)continue;for(let j=firstFaceUpIndex;j<tableauColumn.length;j++){if(canMoveToFoundation('tableau',i,j,getMatchingFoundationPile(tableauColumn[j]))){return{type:'move',fromSource:'tableau',fromPile:i,fromCardIndex:j,toSource:'foundation',toPile:getMatchingFoundationPile(tableauColumn[j]),card:tableauColumn[j]};}}if(tableauColumn.length>0&&!tableauColumn[tableauColumn.length-1].faceUp){return{type:'flip',pile:i};}}if(gameState.waste.length>0){const wasteTopCard=gameState.waste[gameState.waste.length-1];if(canMoveToFoundation('waste',0,gameState.waste.length-1,getMatchingFoundationPile(wasteTopCard))){return{type:'move',fromSource:'waste',fromPile:0,fromCardIndex:gameState.waste.length-1,toSource:'foundation',toPile:getMatchingFoundationPile(wasteTopCard),card:wasteTopCard};}}for(let i=0;i<7;i++){const tableauColumn=gameState.tableau[i];if(tableauColumn.length===0)continue;let firstFaceUpIndex=tableauColumn.findIndex(card=>card.faceUp);if(firstFaceUpIndex===-1)continue;for(let j=firstFaceUpIndex;j<tableauColumn.length;j++){for(let k=0;k<7;k++){if(i===k)continue;if(canMoveCards('tableau',i,j,'tableau',k)){possibleMoves.push({type:'move',fromSource:'tableau',fromPile:i,fromCardIndex:j,toSource:'tableau',toPile:k,card:tableauColumn[j],priority:j===firstFaceUpIndex&&tableauColumn.length>1&&!tableauColumn[j-1].faceUp?3:tableauColumn[j].value==='K'&&j===firstFaceUpIndex?2:1});}}}}if(gameState.waste.length>0){const wasteTopCard=gameState.waste[gameState.waste.length-1];for(let i=0;i<7;i++){if(canMoveCards('waste',0,gameState.waste.length-1,'tableau',i)){possibleMoves.push({type:'move',fromSource:'waste',fromPile:0,fromCardIndex:gameState.waste.length-1,toSource:'tableau',toPile:i,card:wasteTopCard,priority:wasteTopCard.value==='K'?2:1});}}}possibleMoves.sort((a,b)=>b.priority-a.priority);if(possibleMoves.length>0){return possibleMoves[0];}if(gameState.stock.length>0){return{type:'draw'};}return null;}function getMatchingFoundationPile(card){for(let i=0;i<4;i++){const foundationPile=gameState.foundation[i];if(foundationPile.length>0&&foundationPile[0].suit===card.suit){return i;}}for(let i=0;i<4;i++){if(gameState.foundation[i].length===0){return i;}}return 0;}function toggleTheme(){document.body.classList.toggle('dark-mode');const themeIcon=document.querySelector('.theme-toggle i');if(document.body.classList.contains('dark-mode')){themeIcon.textContent='☀️';localStorage.setItem('theme','dark');}else{themeIcon.textContent='🌙';localStorage.setItem('theme','light');}}function applyStoredTheme(){const storedTheme=localStorage.getItem('theme');if(storedTheme==='dark'){document.body.classList.add('dark-mode');document.querySelector('.theme-toggle i').textContent='☀️';}}function updateProgressBar(){const progressBar=document.querySelector('.progress-bar');const percentage=(gameState.totalFoundationCards/52)*100;progressBar.style.width=`${percentage}%`;}document.addEventListener('DOMContentLoaded',()=>{initGame();applyStoredTheme();document.getElementById('new-game-btn').addEventListener('click',newGame);document.getElementById('hint-btn').addEventListener('click',showHint);document.querySelector('.theme-toggle').addEventListener('click',toggleTheme);document.querySelectorAll('.modal-close, .close-modal-btn').forEach(btn=>{btn.addEventListener('click',()=>closeModal(btn.closest('.modal').id));});});